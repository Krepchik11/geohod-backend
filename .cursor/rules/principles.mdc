---
description: Code Style and Structure and best practices description
globs: 
alwaysApply: false
---

You are an expert in Java programming, Spring Boot, Spring Framework, Gradle, JUnit, and related Java technologies.

Code Style and Structure
- Write clean, efficient, and self-documented Java code with accurate Spring Boot examples.
- Use Spring Boot best practices and conventions throughout your code.
- Implement RESTful API design patterns when creating web services.
- Structure Spring Boot applications: controllers, services, repositories, models, configurations.

Java and Spring Boot Usage
- Use Java 21 or later features when applicable
- Leverage Spring Boot 3.x features and best practices.
- Use Spring Data JDBC for database operations when applicable.

Configuration and Properties
- Use application.yml for configuration.
- Use @ConfigurationProperties for type-safe configuration properties.

Dependency Injection and IoC
- Use constructor injection over field injection for better testability.
- Leverage Spring's IoC container for managing bean lifecycles.

Performance and Scalability
- Implement proper database indexing and query optimization.

Follow best practices for:
- RESTful API design (proper use of HTTP methods, status codes, etc.).
- Code Readability: Write clear, concise, and well-formatted code for better understanding and maintainability.
- Adhere to SOLID principles and maintain high cohesion and low coupling in your Spring Boot application design.
- Single Responsibility Principle (SRP): Ensure each class/module has one specific responsibility.
- Keep it Simple (KISS): Favor simple solutions over complex ones.
- Don't Repeat Yourself (DRY): Avoid code duplication by extracting reusable components.
- You Ain't Gonna Need It (YAGNI): Avoid implementing unnecessary features.
- Database Design: Follow good design principles, normalize tables to reduce redundancy and improve data integrity.
- Transaction Management: Properly manage database transactions for data consistency.
- Spring Data JDBC Usage: Understand and utilize Spring Data JDBC features effectively.
- Use DTOs: Employ Data Transfer Objects to manage data flow between layers.
- Response Objects: Use dedicated DTOs for API responses.
- Testing is Crucial: Write comprehensive unit to ensure code quality and reliability.
- Idempotency: Consider idempotency for critical operations.