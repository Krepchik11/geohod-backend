name: Deploy to develop

on:
  workflow_dispatch:

jobs:
  build-and-deploy-development:
    runs-on: ubuntu-latest
    environment: development
    if: github.ref_name == 'develop'
    
    steps:
    - name: Validate branch
      run: |
        if [ "${{ github.ref_name }}" != "develop" ]; then
          echo "This workflow can only be triggered from the 'develop' branch."
          echo "Current branch: ${{ github.ref_name }}"
          exit 1
        fi
        echo "Branch validation passed. Running on 'develop' branch."

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Install Podman
      run: |
        sudo apt-get update
        sudo apt-get install -y podman podman-compose

    - name: Build with Gradle
      run: ./gradlew build -x test

    - name: Set image tags for development
      run: |
        # Validate GITHUB_SHA is available
        if [ -z "$GITHUB_SHA" ]; then
          echo "❌ GITHUB_SHA is not set"
          exit 1
        fi
        
        COMMIT_SHA=${GITHUB_SHA:0:7}
        
        # Validate commit SHA format
        if [[ ! "$COMMIT_SHA" =~ ^[a-f0-9]{7}$ ]]; then
          echo "❌ Invalid commit SHA format: $COMMIT_SHA"
          exit 1
        fi
        
        echo "PRIMARY_TAG=geohod-backend:dev-${COMMIT_SHA}" >> $GITHUB_ENV
        echo "LATEST_TAG=geohod-backend:dev-latest" >> $GITHUB_ENV
        echo "✅ Generated development tags: dev-${COMMIT_SHA} and dev-latest"

    - name: Build Podman image with dynamic tags
      run: |
        podman build -f .github/Dockerfile -t ${{ env.PRIMARY_TAG }} -t ${{ env.LATEST_TAG }} .

    - name: Save Podman image
      run: |
        podman save ${{ env.PRIMARY_TAG }} | gzip > geohod-backend-dev.tar.gz

    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ vars.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        source: "geohod-backend-dev.tar.gz,deployments/dev/"
        target: "~/geohod-backend-dev/"

    - name: Deploy to development
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ vars.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          cd ~/geohod-backend-dev

          # Load Podman image
          podman load < geohod-backend-dev.tar.gz
          
          # Create .env.dev file
          cat > deployments/dev/.env.dev << EOF
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_BOT_USERNAME=${{ secrets.TELEGRAM_BOT_USERNAME }}
          CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}
          GEOHOD_CREATED_EVENT_LINK_TEMPLATE=${{ vars.GEOHOD_CREATED_EVENT_LINK_TEMPLATE }}
          GEOHOD_REVIEW_LINK_TEMPLATE=${{ vars.GEOHOD_REVIEW_LINK_TEMPLATE }}
          IMAGE_TAG=${{ env.PRIMARY_TAG }}
          EOF
          
          # Make scripts executable
          chmod +x deployments/dev/deploy-dev.sh
          chmod +x deployments/dev/deploy-dev-podman.sh
          
          ./deployments/dev/deploy-dev.sh
          
          # Cleanup
          rm geohod-backend-dev.tar.gz