name: Deploy to prod

on:
  workflow_dispatch:

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment: production
    if: github.ref_name == 'main'
    
    steps:
    - name: Validate branch
      run: |
        if [ "${{ github.ref_name }}" != "main" ]; then
          echo "This workflow can only be triggered from the 'main' branch."
          echo "Current branch: ${{ github.ref_name }}"
          exit 1
        fi
        echo "Branch validation passed. Running on 'main' branch."

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Install Podman
      run: |
        sudo apt-get update
        sudo apt-get install -y podman podman-compose

    - name: Build with Gradle
      run: ./gradlew build -x test

    - name: Set image tags for production
      run: |
        # Validate GITHUB_SHA is available
        if [ -z "$GITHUB_SHA" ]; then
          echo "❌ GITHUB_SHA is not set"
          exit 1
        fi
        
        COMMIT_SHA=${GITHUB_SHA:0:7}
        
        # Validate commit SHA format
        if [[ ! "$COMMIT_SHA" =~ ^[a-f0-9]{7}$ ]]; then
          echo "❌ Invalid commit SHA format: $COMMIT_SHA"
          exit 1
        fi
        
        if [[ "$GITHUB_REF_TYPE" == "tag" && "$GITHUB_REF_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
          # Release deployment
          RELEASE_VERSION=${GITHUB_REF_NAME#v}  # Remove 'v' prefix
          
          # Validate release version format
          if [[ ! "$RELEASE_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "❌ Invalid release version format: $RELEASE_VERSION"
            exit 1
          fi
          
          echo "PRIMARY_TAG=geohod-backend:v${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "✅ Generated release tag: v${RELEASE_VERSION}"
        else
          # Manual deployment from main branch
          echo "PRIMARY_TAG=geohod-backend:prod-${COMMIT_SHA}" >> $GITHUB_ENV
          echo "✅ Generated commit tag: prod-${COMMIT_SHA}"
        fi
        echo "LATEST_TAG=geohod-backend:latest" >> $GITHUB_ENV

    - name: Build Podman image with dynamic tags
      run: |
        podman build -f .github/Dockerfile -t ${{ env.PRIMARY_TAG }} -t ${{ env.LATEST_TAG }} .

    - name: Save Podman image
      run: |
        podman save ${{ env.PRIMARY_TAG }} | gzip > geohod-backend-prod.tar.gz

    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ vars.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        source: "geohod-backend-prod.tar.gz,deployments/prod/"
        target: "~/geohod-backend/"

    - name: Deploy to production
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ vars.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          cd ~/geohod-backend
          
          # Load Podman image
          podman load < geohod-backend-prod.tar.gz
          
          # Create .env.prod file
          cat > deployments/prod/.env.prod << EOF
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_BOT_USERNAME=${{ secrets.TELEGRAM_BOT_USERNAME }}
          CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}
          GEOHOD_CREATED_EVENT_LINK_TEMPLATE=${{ vars.GEOHOD_CREATED_EVENT_LINK_TEMPLATE }}
          GEOHOD_REVIEW_LINK_TEMPLATE=${{ vars.GEOHOD_REVIEW_LINK_TEMPLATE }}
          IMAGE_TAG=${{ env.PRIMARY_TAG }}
          EOF
          
          # Make scripts executable
          chmod +x deployments/prod/deploy-prod.sh
          chmod +x deployments/prod/deploy-prod-podman.sh
          
          ./deployments/prod/deploy-prod.sh
          
          # Cleanup
          rm geohod-backend-prod.tar.gz