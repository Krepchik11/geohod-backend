name: Build and Deploy

on:
  release:
    types:
      - published

jobs:
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Generate Changelog
        run: |
          touch CHANGELOG.md
          npx conventional-changelog-cli -p angular -i CHANGELOG.md -s -r 0

      - name: Commit and Push Changelog
        run: |
          git checkout -b update-changelog
          git add CHANGELOG.md
          git commit -m "docs: update changelog for ${{ github.event.release.tag_name }}"
          git push origin update-changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: update changelog for ${{ github.event.release.tag_name }}"
          branch: update-changelog
          title: "Changelog update for ${{ github.event.release.tag_name }}"
          body: "This PR updates the changelog for the release ${{ github.event.release.tag_name }}."

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: JDK
        uses: actions/setup-java@v4.5.0
        with:
          distribution: 'temurin'
          java-version: '23'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build
        run: ./gradlew clean build --no-daemon -x test

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./.github/Dockerfile
          tags: geohod:${{ github.event.release.tag_name }}
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-app-image
          path: /tmp/image.tar

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Create SSH key
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-app-image

      - name: Transfer image to VPS
        run: |
          scp image.tar ${{ secrets.VPS_USER }}@${{ vars.VPS_HOST }}:/tmp/image.tar

      - name: VPS launch
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            docker load < /tmp/image.tar
            docker stop geohod || true
            docker rm geohod || true
            
            # Extract and pass environment variables
            SECRET_VARS="${{ secrets.SECRET_VARS }}"
            ENV_ARGS=""
            IFS=',' read -r -a vars <<< "$SECRET_VARS"
            for var in "${vars[@]}"; do
              ENV_ARGS="$ENV_ARGS -e $var"
            done
            
            docker run -d --restart always \
              --network=geohod \
              --name geohod \
              -p 80:8080 \
              -e SPRING_DATASOURCE_URL='jdbc:postgresql://postgres:5432/geohod' \
              $ENV_ARGS \
              geohod:${{ github.event.release.tag_name }}