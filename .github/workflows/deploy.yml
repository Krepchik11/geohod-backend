name: Build, Release, and Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: # manual triggering

jobs:
  build-and-release:
    name: Build and Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: JDK23
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon -x test

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Build and export docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.github/Dockerfile
          push: false
          tags: ${{ github.repository }}:${{ github.ref_name }}
          outputs: type=docker,dest=/tmp/image.tar

      - name: Generate Changelog
        uses: metcalfc/changelog-generator@v4
        with:
          mytoken: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }} # mark as prerelease if tag contains '-'

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-app-image
          path: /tmp/image.tar

  deploy:
    name: Deploy to VPS
    needs: build-and-release
    if: github.event_name == 'workflow_dispatch' # Only run on manual dispatch
    runs-on: ubuntu-latest
    environment: Production # Add environment for better tracking

    steps:
      - name: Create SSH key
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-app-image

      - name: Transfer image to VPS
        run: |
          scp image.tar ${{ secrets.VPS_USER }}@${{ vars.VPS_HOST }}:/tmp/image.tar

      - name: VPS launch
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            docker load < /tmp/image.tar
            docker stop geohod || true
            docker rm geohod || true
            
            # Extract and pass environment variables securely
            SECRET_VARS="${{ secrets.SECRET_VARS }}"
            ENV_ARGS=""
            IFS=',' read -r -a vars <<< "$SECRET_VARS"
            for var in "${vars[@]}"; do
              IFS='=' read -r key value <<< "$var"
              ENV_ARGS="$ENV_ARGS -e $key='$value'"
            done

            docker run -d --restart always \
              --network=geohod \
              --name geohod \
              -p 80:8080 \
              -e SPRING_DATASOURCE_URL='jdbc:postgresql://postgres:5432/geohod' \
              $ENV_ARGS \
              ${{ github.repository }}:${{ github.ref_name }}