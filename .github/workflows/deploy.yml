name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: JDK
        uses: actions/setup-java@v4.5.0
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build
        run: ./gradlew clean build --no-daemon -x test

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./.github/Dockerfile
          tags: geohod:${{ github.sha }}
          outputs: type=docker,dest=/tmp/image.tar
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-app-image
          path: /tmp/image.tar

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Create SSH key
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-app-image
          path: ./image.tar
      - name: SSH docker load
        run: cat image.tar | ssh ${{ secrets.VPS_USER }}@${{ vars.VPS_HOST }} 'docker load'
      - name: VPS launch
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            docker stop geohod || true
            docker rm geohod || true
            docker run -d --restart always \
            --network=geohod \
            --name geohod \
            -p 80:8080 \
            -e SPRING_DATASOURCE_URL='jdbc:postgresql://postgres:5432/geohod' \
            geohod:latest